import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import os
import re
import subprocess
import threading
import sys

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard - An√°lise CNPJ Alfanum√©rico",
    page_icon="üìä",
    layout="wide"
)

# T√≠tulo principal
st.title("üìä Dashboard - An√°lise de Impacto CNPJ Alfanum√©rico")
st.markdown("### Vis√£o Estrat√©gica para Precifica√ß√£o da Proposta")

# --- CONTROLE DE EXECU√á√ÉO NA SIDEBAR ---
st.sidebar.title("‚öôÔ∏è Controles")

if st.sidebar.button("Executar Nova An√°lise", type="primary"):
    st.session_state.run_analysis = True
    st.session_state.analysis_output = ""
    st.session_state.analysis_done = False

if 'run_analysis' in st.session_state and st.session_state.run_analysis:
    st.sidebar.info("An√°lise em andamento...")
    output_placeholder = st.sidebar.empty()
    
    # Usando st.spinner para uma melhor UX
    with st.spinner('Executando main.py... Por favor, aguarde.'):
        try:
            # Garante que o processo filho use UTF-8 para I/O, resolvendo problemas de encoding no Windows.
            env = os.environ.copy()
            env['PYTHONIOENCODING'] = 'UTF-8'

            # Comando para executar o script. '-u' para unbuffered output.
            # Usar sys.executable garante que o subprocesso use o mesmo ambiente Python que o Streamlit.
            process = subprocess.Popen(
                [sys.executable, '-u', 'main.py'],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                encoding='utf-8',
                text=True,
                env=env
            )

            log_output = ""
            for line in iter(process.stdout.readline, ''):
                log_output += line
                output_placeholder.code(log_output, language='log')
            
            process.stdout.close()
            return_code = process.wait()

            if return_code == 0:
                st.session_state.analysis_output = log_output + "\n\n‚úÖ An√°lise conclu√≠da com sucesso!"
                st.toast("An√°lise finalizada! Os dados foram atualizados.", icon="üéâ")
            else:
                st.session_state.analysis_output = log_output + f"\n\n‚ùå ERRO: A an√°lise falhou com c√≥digo de sa√≠da {return_code}."
                st.toast("Ocorreu um erro durante a an√°lise.", icon="üî•")

        except Exception as e:
            st.session_state.analysis_output = f"‚ùå FALHA CR√çTICA ao executar o script: {e}"
            st.toast("Falha cr√≠tica ao tentar executar o script.", icon="üö®")

    st.session_state.run_analysis = False
    st.session_state.analysis_done = True
    st.cache_data.clear() # Limpa o cache para for√ßar o recarregamento dos dados
    st.rerun() # For√ßa o rerun do script do dashboard

if 'analysis_done' in st.session_state and st.session_state.analysis_done:
    st.sidebar.code(st.session_state.analysis_output, language='log')
    if st.sidebar.button("Limpar Log"):
        st.session_state.analysis_done = False
        st.session_state.analysis_output = ""
        st.rerun()

# Configura√ß√£o de arquivos
ARQUIVO_AJUSTES = 'analise_ajustes_criticos.xlsx'
ARQUIVO_PRECIFICACAO = 'analise_precificacao_proposta.xlsx'
ARQUIVO_DESCARTES = 'analise_descartes.xlsx'
ARQUIVO_NAO_CLASSIFICADOS = 'analise_sem_classificacao.xlsx'

# Mapeamento de categorias para cores (atualizado)
CORES_FRENTES = {
    'An√°lise e Planejamento': '#4682B4',
    'Desenvolvimento': '#FF8C00',
    'Refatora√ß√£o': '#32CD32',
    'Testes e Implanta√ß√£o': '#FF4B4B',
    'Outros': '#9370DB'
}

# Fun√ß√£o para carregar dados
@st.cache_data
def carregar_dados():
    dados = {}
    
    # Carregar dados de ajustes (pontos cr√≠ticos)
    if os.path.exists(ARQUIVO_AJUSTES):
        dados['ajustes'] = pd.read_excel(ARQUIVO_AJUSTES)
    
    # Carregar dados de precifica√ß√£o
    if os.path.exists(ARQUIVO_PRECIFICACAO):
        dados['precificacao'] = {}
        try:
            xls = pd.ExcelFile(ARQUIVO_PRECIFICACAO)
            sheet_map = {
                'sumario': '1_Summary_Executivo',
                'detalhes': '2_Estimativa_Detalhada',
                'pontos': '3_Detalhe_Pontos_Oficiais' # Mantido para consist√™ncia
            }
            for key, sheet_name in sheet_map.items():
                if sheet_name in xls.sheet_names:
                    dados['precificacao'][key] = pd.read_excel(ARQUIVO_PRECIFICACAO, sheet_name=sheet_name)
        except Exception as e:
            st.error(f"Erro ao carregar precifica√ß√£o: {e}")
    
    # Carregar outros dados
    for nome, arquivo in [('descartes', ARQUIVO_DESCARTES), ('nao_classificados', ARQUIVO_NAO_CLASSIFICADOS)]:
        if os.path.exists(arquivo):
            try:
                dados[nome] = pd.read_excel(arquivo)
            except Exception as e:
                st.warning(f"Erro ao carregar {nome}: {e}")
    
    return dados

# Carregar dados
dados = carregar_dados()

# Sidebar para navega√ß√£o
st.sidebar.title("üîç Navega√ß√£o")
pagina = st.sidebar.radio(
    "Escolha a visualiza√ß√£o:",
    [
        "üìà Vis√£o Executiva", 
        "üí∞ Precifica√ß√£o Detalhada",
        "üèóÔ∏è An√°lise por Prefixo/Grupo",
        "üîç Explorador de Pontos Cr√≠ticos"
    ]
)

# === P√ÅGINA: VIS√ÉO EXECUTIVA ===
if pagina == "üìà Vis√£o Executiva":
    
    if 'precificacao' in dados and 'sumario' in dados['precificacao']:
        summary = dados['precificacao']['sumario']
        
        st.markdown("## üéØ Resumo Executivo - Abordagem Realista")
        
        # Extrair m√©tricas do summary
        metrics = {}
        for _, row in summary.iterrows():
            metrics[row['M√©trica']] = row['Valor']
        
        # Garantir que todos os valores de m√©tricas sejam strings para evitar erro de tipo
        for k, v in metrics.items():
            metrics[k] = str(v)
        
        # M√©tricas principais em colunas
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            st.metric(
                "Esfor√ßo Total", 
                metrics.get('Total Estimado', 'N/A'),
                help="Soma de todas as frentes: Desenvolvimento + Testes QA"
            )
            
        with col2:
            st.metric(
                "Com Buffer 20%", 
                metrics.get('Estimativa com Buffer 20%', 'N/A'),
                help="Margem para imprevistos e atividades n√£o planejadas"
            )

        with col3:
            st.metric(
                "Desenvolvimento", 
                metrics.get('Esfor√ßo Desenvolvimento', 'N/A'),
                help="Codifica√ß√£o, arquitetura e atividades de desenvolvimento"
            )
            
        with col4:
            st.metric(
                "Testes QA", 
                metrics.get('Esfor√ßo Testes QA', 'N/A'),
                help="Testes unit√°rios, integra√ß√£o, regress√£o e homologa√ß√£o"
            )
            
        with col5:
            st.metric(
                "Rotinas Impactadas",
                str(metrics.get('Rotinas Oficiais Impactadas', 'N/A')),
                help="N√∫mero de programas/rotinas oficiais √∫nicos que sofrer√£o altera√ß√µes."
            )

        # Gr√°fico de distribui√ß√£o por frente de trabalho
        if 'detalhes' in dados['precificacao']:
            st.markdown("## üìä Distribui√ß√£o de Esfor√ßo por Frente de Trabalho")
            
            df_cat = dados['precificacao']['detalhes'].copy()

            # Fix para erro de tipo: garantir que colunas potencialmente mistas sejam string
            if 'Pontos Identificados' in df_cat.columns:
                df_cat['Pontos Identificados'] = df_cat['Pontos Identificados'].astype(str)
            
            # Gr√°fico de barras horizontais
            fig_bar = px.bar(
                df_cat, 
                x='Total (h)', 
                y='Frente de Trabalho',
                title="Esfor√ßo por Frente de Trabalho (Dev + Testes)",
                orientation='h',
                text='Total (h)',
                color='Tipo',
                color_discrete_map={
                    'Atividade Base': '#4682B4',
                    'Ajuste de C√≥digo': '#FF8C00'
                }
            )
            fig_bar.update_traces(texttemplate='%{text}h', textposition='outside')
            fig_bar.update_layout(height=500, yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig_bar, use_container_width=True)
            
            # Tabela com detalhes
            st.markdown("### üìã Detalhamento por Frente")
            df_display = df_cat[['Frente de Trabalho', 'Tipo', 'Esfor√ßo Dev (h)', 'Esfor√ßo Testes (h)', 'Total (h)', 'Observa√ß√£o']].copy()
            st.dataframe(df_display, use_container_width=True)

            # Texto para escopo da proposta
            st.markdown("## üìù Texto Sugerido para Proposta (Escopo)")
            escopo_proposta = """
O escopo desta proposta contempla o projeto completo de adequa√ß√£o do sistema ao novo padr√£o de CNPJ alfanum√©rico, compreendendo as seguintes frentes de trabalho:

1.  **An√°lise e Planejamento:** Levantamento de todos os pontos de impacto no c√≥digo-fonte, planejamento de atividades, defini√ß√£o de arquitetura e coordena√ß√£o do projeto.
2.  **Desenvolvimento da Solu√ß√£o Central:** Cria√ß√£o de fun√ß√µes e componentes centralizados para validar, formatar, armazenar e calcular o d√≠gito verificador (DV) do novo CNPJ alfanum√©rico.
3.  **Refatora√ß√£o do C√≥digo-Fonte:** Substitui√ß√£o de todas as manipula√ß√µes de CNPJ (valida√ß√µes, formata√ß√µes, l√≥gicas de neg√≥cio) por chamadas √† nova solu√ß√£o central. Inclui a an√°lise e ajuste de sub-rotinas e queries de banco de dados impactadas.
4.  **Ajustes de Infraestrutura e Integra√ß√µes:** Migra√ß√£o do padr√£o de c√≥digo de barras da DANFE para o formato CODE-128A.
5.  **Testes e Homologa√ß√£o:** Ciclo completo de testes, incluindo testes unit√°rios, testes integrados e suporte √† homologa√ß√£o pelo cliente (UAT) para garantir a conformidade e a aus√™ncia de regress√µes.
6.  **P√≥s-Implanta√ß√£o:** Opera√ß√£o assistida para acompanhamento em produ√ß√£o e resolu√ß√£o de ajustes remanescentes.

**Fora do Escopo:**
*   Quaisquer altera√ß√µes de funcionalidade n√£o relacionadas diretamente √† adequa√ß√£o do CNPJ.
*   Migra√ß√£o de dados hist√≥ricos (a ser avaliada em projeto espec√≠fico, se necess√°rio).
"""
            st.text_area("Edite e copie o texto abaixo:", escopo_proposta, height=400)
    
    else:
        st.warning("‚ö†Ô∏è Dados de precifica√ß√£o n√£o encontrados. Execute primeiro o script main.py.")

# === P√ÅGINA: PRECIFICA√á√ÉO DETALHADA ===
elif pagina == "üí∞ Precifica√ß√£o Detalhada":
    
    if 'precificacao' in dados and 'detalhes' in dados['precificacao']:
        st.markdown("## üí∞ An√°lise Detalhada por Frente de Trabalho")
        
        df_detalhes = dados['precificacao']['detalhes']
        
        # Gr√°fico comparativo Dev vs Testes
        st.markdown("### Esfor√ßo: Desenvolvimento vs. Testes")
        fig_comp = go.Figure()
        fig_comp.add_trace(go.Bar(
            name='Desenvolvimento',
            x=df_detalhes['Frente de Trabalho'],
            y=df_detalhes['Esfor√ßo Dev (h)'],
            marker_color='#4682B4',
            text=df_detalhes['Esfor√ßo Dev (h)'],
            textposition='inside'
        ))
        fig_comp.add_trace(go.Bar(
            name='Testes QA',
            x=df_detalhes['Frente de Trabalho'],
            y=df_detalhes['Esfor√ßo Testes (h)'],
            marker_color='#FF4B4B',
            text=df_detalhes['Esfor√ßo Testes (h)'],
            textposition='inside'
        ))
        
        fig_comp.update_layout(
            title_text="Distribui√ß√£o de Esfor√ßo: Desenvolvimento vs. Testes",
            barmode='stack',
            height=600,
            xaxis={'categoryorder':'total descending'},
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
        )
        st.plotly_chart(fig_comp, use_container_width=True)
        
        # Cards expand√≠veis com detalhes
        st.markdown("### üéØ Detalhamento das Frentes")
        for _, row in df_detalhes.iterrows():
            with st.expander(f"**{row['Frente de Trabalho']}** - {row['Total (h)']}h"):
                st.markdown(f"*{row['Observa√ß√£o']}*")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Total", f"{row['Total (h)']}h")
                with col2:
                    st.metric("Desenvolvimento", f"{row['Esfor√ßo Dev (h)']}h")
                with col3:
                    st.metric("Testes QA", f"{row['Esfor√ßo Testes (h)']}h")

    else:
        st.warning("‚ö†Ô∏è Dados de precifica√ß√£o n√£o encontrados. Execute o script principal primeiro.")

# === P√ÅGINA: AN√ÅLISE POR M√ìDULO ===
elif pagina == "üèóÔ∏è An√°lise por Prefixo/Grupo":
    
    if 'ajustes' in dados:
        st.markdown("## üèóÔ∏è An√°lise de Impacto por Prefixo/Grupo de Programas")
        df_ajustes = dados['ajustes']
        
        # Contagem de pontos por m√≥dulo (prefixo do arquivo)
        df_modulos = df_ajustes['Prefixo'].value_counts().reset_index()
        df_modulos.columns = ['Prefixo/Grupo', 'Pontos Cr√≠ticos']
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.metric("Total de Grupos Impactados", df_modulos['Prefixo/Grupo'].nunique())
            st.markdown("#### Top 10 Grupos Cr√≠ticos")
            st.dataframe(df_modulos.head(10), use_container_width=True)

        with col2:
            st.markdown("#### Distribui√ß√£o de Pontos Cr√≠ticos por Grupo")
            fig = px.bar(
                df_modulos.head(20).sort_values(by='Pontos Cr√≠ticos', ascending=True),
                x='Pontos Cr√≠ticos',
                y='Prefixo/Grupo',
                orientation='h',
                title='Top 20 Grupos com Mais Pontos de Ajuste'
            )
            fig.update_layout(height=600)
            st.plotly_chart(fig, use_container_width=True)
            
    else:
        st.warning("‚ö†Ô∏è Dados de ajustes cr√≠ticos n√£o encontrados. Execute o script principal e recarregue a p√°gina.")

# === P√ÅGINA: EXPLORADOR DE PONTOS CR√çTICOS ===
elif pagina == "üîç Explorador de Pontos Cr√≠ticos":

    if 'ajustes' in dados:
        st.markdown("## üîç Explorador Interativo de Pontos Cr√≠ticos")
        df_ajustes = dados['ajustes'].copy()
        
        # Filtros
        st.sidebar.header("Filtros do Explorador")
        
        # Filtro por M√≥dulo (Prefixo)
        modulos_unicos = sorted(df_ajustes['Prefixo'].unique())
        modulos_selecionados = st.sidebar.multiselect("Prefixo/Grupo", modulos_unicos, default=modulos_unicos[:5])
        
        # Filtro por Arquivo
        arquivos_unicos = sorted(df_ajustes[df_ajustes['Prefixo'].isin(modulos_selecionados)]['Arquivo'].unique())
        arquivo_selecionado = st.sidebar.multiselect("Arquivo Espec√≠fico", arquivos_unicos)

        # Aplicar filtros
        if modulos_selecionados:
            df_filtrado = df_ajustes[df_ajustes['Prefixo'].isin(modulos_selecionados)]
            if arquivo_selecionado:
                df_filtrado = df_filtrado[df_filtrado['Arquivo'].isin(arquivo_selecionado)]
        else:
            df_filtrado = df_ajustes

        # Fun√ß√£o para destacar vari√°veis no c√≥digo
        def destacar_variaveis(row):
            codigo = str(row['C√≥digo'])
            variaveis = str(row['Vari√°vel']).split(', ')
            for var in variaveis:
                # Usar re.escape para tratar caracteres especiais nas vari√°veis
                codigo = re.sub(f'({re.escape(var)})', r'**:red[\\1]**', codigo, flags=re.IGNORECASE)
            return codigo

        # Aplicar o destaque
        if not df_filtrado.empty:
            # Criar uma c√≥pia expl√≠cita aqui para evitar o SettingWithCopyWarning
            df_filtrado = df_filtrado.copy()
            df_filtrado.loc[:, 'C√≥digo'] = df_filtrado.apply(destacar_variaveis, axis=1)
        
        st.dataframe(df_filtrado, use_container_width=True)
        st.info(f"Exibindo {len(df_filtrado)} de {len(df_ajustes)} pontos cr√≠ticos.")

    else:
        st.warning("‚ö†Ô∏è Dados de ajustes cr√≠ticos n√£o encontrados. Execute o script principal e recarregue a p√°gina.")

# Rodap√©
st.markdown("---")
st.markdown("üìä **Dashboard de An√°lise CNPJ Alfanum√©rico** | Desenvolvido para suporte √† precifica√ß√£o da proposta")

# Instru√ß√µes de uso na sidebar
st.sidebar.markdown("---")
st.sidebar.title("üìñ Como usar")
st.sidebar.markdown("""
1.  **Clique em 'Executar Nova An√°lise'** para gerar os dados mais recentes a partir do c√≥digo-fonte.
2.  **Aguarde a execu√ß√£o terminar.** O log aparecer√° na barra lateral.
3.  **Navegue pelas abas** para explorar os resultados.
4.  **Use os filtros no Explorador** para an√°lises detalhadas.
""")

# Informa√ß√µes t√©cnicas na sidebar
if 'ajustes' in dados:
    st.sidebar.markdown("### üìà Estat√≠sticas:")
    df = dados['ajustes']
    st.sidebar.metric("Total de Pontos", len(df))
    if 'Estimativa (Horas)' in df.columns:
        st.sidebar.metric("Total Estimado", f"{df['Estimativa (Horas)'].sum():.1f}h")
    st.sidebar.metric("Arquivos √önicos", df['Arquivo'].nunique()) 