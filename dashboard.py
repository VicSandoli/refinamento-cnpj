import streamlit as st
import pandas as pd
import plotly.express as px
import os

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="An√°lise de Impacto de Refatora√ß√£o",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- ESTILO CSS CUSTOMIZADO (Opcional, para refinar o visual) ---
st.markdown("""
<style>
    /* Melhora a apar√™ncia dos containers de m√©tricas */
    .stMetric {
        border-radius: 10px;
        padding: 15px;
        background-color: #262730;
        border: 1px solid #4A4A4A;
    }
    /* Estilo para os t√≠tulos das se√ß√µes */
    h2 {
        border-bottom: 2px solid #4A90E2;
        padding-bottom: 5px;
        color: #FFFFFF;
    }
    /* Estilo para expanders */
    .st-expander {
        border: 1px solid #4A4A4A !important;
        border-radius: 10px !important;
    }
</style>
""", unsafe_allow_html=True)


# --- FUN√á√ÉO DE CARREGAMENTO DE DADOS (com cache) ---
# O cache do Streamlit garante que os dados s√≥ sejam recarregados se os arquivos mudarem.
@st.cache_data
def carregar_dados():
    """Carrega os dados dos tr√™s arquivos Excel gerados pelo script de an√°lise."""
    caminhos = {
        "impacto": 'analise_impacto_cnpj_refinada.xlsx',
        "descartes": 'analise_descartes.xlsx',
        "sem_classificacao": 'analise_sem_classificacao.xlsx'
    }
    dados = {}
    erros = {}

    for nome, caminho in caminhos.items():
        if os.path.exists(caminho):
            try:
                dados[nome] = pd.read_excel(caminho)
            except Exception as e:
                erros[nome] = f"Erro ao ler '{caminho}': {e}"
        else:
            erros[nome] = f"Arquivo '{caminho}' n√£o encontrado. Execute o script 'main.py' primeiro."
    
    return dados, erros

# --- T√çTULO PRINCIPAL ---
st.title("üìä Painel de An√°lise de Impacto - Refatora√ß√£o de CNPJ")
st.markdown("Vis√£o gerencial dos resultados da an√°lise de c√≥digo para a migra√ß√£o de CNPJ num√©rico para alfanum√©rico.")


# --- CARREGAMENTO E VALIDA√á√ÉO DOS DADOS ---
dados, erros = carregar_dados()

if erros:
    for nome, msg in erros.items():
        st.error(msg)
    st.warning("Alguns ou todos os relat√≥rios n√£o puderam ser carregados. Os dados exibidos podem estar incompletos.")

# --- DADOS DE IMPACTO (O FOCO PRINCIPAL) ---
df_impacto = dados.get("impacto")
df_descartes = dados.get("descartes")
df_nao_classificados = dados.get("sem_classificacao")

# --- ESTRUTURA DE ABAS ---
tab_geral, tab_impacto, tab_descartes, tab_sem_class = st.tabs([
    "Vis√£o Geral", 
    "üî¥ Detalhes do Impacto", 
    "üü¢ Itens Descartados", 
    "üü° Itens Sem Classifica√ß√£o"
])


with tab_geral:
    st.header("Resumo Geral da An√°lise")

    # --- M√âTRICAS GERAIS ---
    total_impacto = len(df_impacto) if df_impacto is not None else 0
    total_descartado = len(df_descartes) if df_descartes is not None else 0
    total_sem_class = len(df_nao_classificados) if df_nao_classificados is not None else 0
    total_analisado = total_impacto + total_descartado + total_sem_class

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric(label="Pontos de Impacto", value=f"{total_impacto:,}".replace(",", "."))
    with col2:
        st.metric(label="Itens Descartados", value=f"{total_descartado:,}".replace(",", "."))
    with col3:
        st.metric(label="Sem Classifica√ß√£o", value=f"{total_sem_class:,}".replace(",", "."))
    with col4:
        st.metric(label="Total de Linhas Relevantes", value=f"{total_analisado:,}".replace(",", "."))

    st.markdown("<hr/>", unsafe_allow_html=True) # Divisor

    # --- M√âTRICAS ADICIONAIS ---
    if df_impacto is not None and not df_impacto.empty:
        arquivos_unicos = df_impacto['Arquivo'].nunique()
        pontos_risco_alto = len(df_impacto[df_impacto['N√≠vel de Risco'] == 'Alto'])
        perc_risco = (total_impacto / total_analisado * 100) if total_analisado > 0 else 0

        col5, col6, col7 = st.columns(3)
        with col5:
            st.metric(label="Arquivos √önicos Impactados", value=f"{arquivos_unicos:,}".replace(",", "."))
        with col6:
            st.metric(label="üî¥ Pontos de Risco Alto", value=f"{pontos_risco_alto:,}".replace(",", "."))
        with col7:
            st.metric(label="% de Risco", value=f"{perc_risco:.2f}%")

    # --- GR√ÅFICOS DE RESUMO ---
    if df_impacto is not None and not df_impacto.empty:
        st.header("An√°lise Visual do Impacto")

        c1, c2 = st.columns(2)
        with c1:
            st.subheader("Impacto por N√≠vel de Risco")
            contagem_risco = df_impacto['N√≠vel de Risco'].value_counts().reset_index()
            contagem_risco.columns = ['N√≠vel de Risco', 'Contagem']
            fig_risco = px.bar(
                contagem_risco, x='N√≠vel de Risco', y='Contagem',
                title="Distribui√ß√£o de Ocorr√™ncias por Risco",
                color='N√≠vel de Risco',
                color_discrete_map={'Alto': '#FF4B4B', 'M√©dio': '#FFD700', 'Baixo': '#4CAF50'},
                text_auto=True
            )
            fig_risco.update_layout(showlegend=False)
            st.plotly_chart(fig_risco, use_container_width=True)
        
        with c2:
            st.subheader("Impacto por Classifica√ß√£o de Arquivo")
            contagem_classificacao = df_impacto['Classifica√ß√£o'].value_counts().reset_index()
            contagem_classificacao.columns = ['Classifica√ß√£o', 'Contagem']
            fig_classificacao = px.pie(
                contagem_classificacao, names='Classifica√ß√£o', values='Contagem',
                title="Propor√ß√£o de Impacto por Tipo de M√≥dulo", hole=0.4
            )
            st.plotly_chart(fig_classificacao, use_container_width=True)

with tab_impacto:
    st.header("Explora√ß√£o dos Pontos de Impacto")
    if df_impacto is not None and not df_impacto.empty:
        # Gr√°fico: Padr√µes de Risco Mais Comuns
        st.subheader("Padr√µes de Risco Mais Frequentes")
        contagem_padrao = df_impacto['Padr√£o de Risco'].value_counts().nlargest(10).reset_index()
        contagem_padrao.columns = ['Padr√£o de Risco', 'Contagem']
        fig_padrao = px.bar(
            contagem_padrao, y='Padr√£o de Risco', x='Contagem', orientation='h',
            title="Top 10 Padr√µes de Risco Encontrados", text_auto=True
        )
        fig_padrao.update_yaxes(categoryorder="total ascending")
        st.plotly_chart(fig_padrao, use_container_width=True)
        
        # Tabela de dados
        st.subheader("Dados Completos de Impacto")
        st.dataframe(df_impacto)
    else:
        st.info("Nenhum dado de impacto para exibir.")

with tab_descartes:
    st.header("Consulta de Itens Descartados")
    if df_descartes is not None:
        st.dataframe(df_descartes)
    else:
        st.info("Nenhum item descartado para exibir.")

with tab_sem_class:
    st.header("Consulta de Itens Sem Classifica√ß√£o")
    if df_nao_classificados is not None:
        st.dataframe(df_nao_classificados)
    else:
        st.info("Nenhum item sem classifica√ß√£o para exibir.") 